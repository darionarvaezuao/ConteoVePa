#!/usr/bin/env python3
"""
Script simple para lanzar MLflow UI sin bloqueo de consola.
Especialmente dise√±ado para PowerShell en Windows.
"""

import os
import sys
import subprocess
import webbrowser
import time
from pathlib import Path

def launch_mlflow_ui_simple(port: int = 5000, open_browser: bool = True):
    """
    Lanza MLflow UI de forma simple sin bloquear la consola.
    
    Args:
        port: Puerto para la interfaz web
        open_browser: Si abrir autom√°ticamente el navegador
    """
    # Verificar MLflow
    try:
        import mlflow
        print(f"‚úÖ MLflow {mlflow.__version__} encontrado")
    except ImportError:
        print("‚ùå MLflow no instalado. Usa: pip install mlflow")
        return

    # Configurar directorio
    mlruns_dir = Path("mlruns")
    if not mlruns_dir.exists():
        mlruns_dir.mkdir()

    tracking_uri = f"file:///{mlruns_dir.absolute()}"
    
    print(f"üöÄ Lanzando MLflow UI en puerto {port}")
    print(f"üåê URL: http://localhost:{port}")
    print(f"üìÇ Directorio: {mlruns_dir.absolute()}")
    print("üí° Para detener: Ctrl+C en esta consola")
    print("-" * 50)

    # Construir comando
    cmd = [
        sys.executable, "-m", "mlflow", "ui",
        "--port", str(port),
        "--backend-store-uri", tracking_uri,
        "--host", "127.0.0.1"
    ]

    # Abrir navegador despu√©s de unos segundos
    if open_browser:
        def open_browser_delayed():
            time.sleep(3)
            webbrowser.open(f"http://localhost:{port}")
        
        import threading
        threading.Thread(target=open_browser_delayed, daemon=True).start()

    # Ejecutar en Windows de forma que no bloquee
    if os.name == 'nt':
        try:
            # Usar CREATE_NEW_CONSOLE para evitar bloqueo
            import subprocess
            subprocess.Popen(
                cmd, 
                creationflags=subprocess.CREATE_NEW_CONSOLE if hasattr(subprocess, 'CREATE_NEW_CONSOLE') else 0
            )
            print("‚úÖ MLflow UI lanzado en nueva ventana de consola")
            print(f"üåê Accede a: http://localhost:{port}")
            print("üí° La interfaz se abri√≥ en una ventana separada")
            
        except Exception as e:
            print(f"‚ùå Error: {e}")
            print("üìù Intenta ejecutar manualmente:")
            print(f"   mlflow ui --port {port}")
    else:
        # Para Linux/Mac
        try:
            subprocess.Popen(cmd)
            print("‚úÖ MLflow UI lanzado en background")
        except Exception as e:
            print(f"‚ùå Error: {e}")

if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(description="Lanzar MLflow UI simple")
    parser.add_argument("--port", type=int, default=5000)
    parser.add_argument("--no-browser", action="store_true")
    
    args = parser.parse_args()
    
    launch_mlflow_ui_simple(port=args.port, open_browser=not args.no_browser)