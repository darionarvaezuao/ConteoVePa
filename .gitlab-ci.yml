variables:
  UV_VERSION: "0.5"
  PYTHON_VERSION: "3.11"
  BASE_LAYER: bookworm-slim
  UV_LINK_MODE: copy
  IMAGE_NAME: nemesis800/conteovepa     
  IMAGE_TAG: python-application-v1.0
  UV_CACHE_DIR: .uv_cache

stages:
  - test
  - build
  - deploy

# ==========================
# TEST
# ==========================
run_test:
  stage: test
  image: ghcr.io/astral-sh/uv:$UV_VERSION-python$PYTHON_VERSION-$BASE_LAYER
  before_script:
    - apt-get update && apt-get install -y make libgl1-mesa-glx libglib2.0-0
    # crear entorno virtual
    - uv venv
    - source .venv/bin/activate
  script:
    # instalar solo dependencias web
    - uv pip install -r requirements-web.txt
    - make test
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - ${UV_CACHE_DIR}
      - .pytest_cache
      - .venv

# ==========================
# BUILD
# ==========================
build_image:
  stage: build
  image: docker:28.4.0-cli
  services:
    - docker:28.4.0-dind
  variables:
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_TLS_CERTDIR: ""
  before_script:
    - echo "$REGISTRY_PASSWORD" | docker login -u "$REGISTRY_USER" --password-stdin
  script:
    # usa el requirements completo dentro del Dockerfile
    - docker build -t $IMAGE_NAME:$IMAGE_TAG .
    - docker push $IMAGE_NAME:$IMAGE_TAG

# ==========================
# DEPLOY
# ==========================
deploy:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client
    - echo "$SSH_KEY" > id_rsa
    - chmod 400 id_rsa
script:
  - |
    ssh -o StrictHostKeyChecking=no -i id_rsa root@45.55.177.84 "
      export REGISTRY_USER='$REGISTRY_USER'
      export REGISTRY_PASSWORD='$REGISTRY_PASSWORD'
      export IMAGE_NAME='$IMAGE_NAME'
      export IMAGE_TAG='$IMAGE_TAG'

      set -e
      echo \$REGISTRY_PASSWORD | docker login -u \$REGISTRY_USER --password-stdin
      CONTAINER_NAME=conteo-app
      docker pull \$IMAGE_NAME:\$IMAGE_TAG
      if [ \$(docker ps -q -f name=\$CONTAINER_NAME) ]; then
        docker stop \$CONTAINER_NAME
        docker rm \$CONTAINER_NAME
      fi
      docker run -d -p 8501:8501 --name \$CONTAINER_NAME \$IMAGE_NAME:\$IMAGE_TAG
      docker image prune -f
    "
